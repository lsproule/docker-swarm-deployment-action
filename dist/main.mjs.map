{"version":3,"file":"main.mjs","sources":["../src/utils.ts","../src/variables.ts","../src/compose.ts","../src/monitoring.ts","../src/deployment.ts","../src/settings.ts","../src/main.ts"],"sourcesContent":["import { access, constants } from \"node:fs/promises\";\n\n/**\n * Check if a file or directory exists\n *\n * @param path The path to check\n */\nexport async function exists(path: string) {\n  try {\n    await access(path, constants.F_OK);\n  } catch {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Sleep for the specified number of milliseconds\n */\nexport async function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import * as core from \"@actions/core\";\nimport { createHash } from \"crypto\";\nimport Docker from \"dockerode\";\nimport * as crypto from \"node:crypto\";\nimport { readFile, writeFile } from \"node:fs/promises\";\nimport { env } from \"node:process\";\nimport type { ComposeSpec } from \"./compose.js\";\nimport type { Settings } from \"./settings.js\";\nimport { exists } from \"./utils.js\";\n\nexport const nameLabel = \"com.matchory.deployment.name\";\nexport const hashLabel = \"com.matchory.deployment.hash\";\nexport const stackLabel = \"com.matchory.deployment.stack\";\nexport const versionLabel = \"com.matchory.deployment.version\";\nexport const encodeLabel = \"com.matchory.deployment.encode\";\nexport const decodeLabel = \"com.matchory.deployment.decode\";\nexport const ignoreLabel = \"com.matchory.deployment.ignore\";\n\n/**\n * Process a variable (secret or config)\n */\nexport async function processVariable(\n  name: string,\n  variable: Variable | null,\n  {\n    envVarPrefix,\n    stack,\n    version,\n  }: Pick<Settings, \"envVarPrefix\" | \"stack\" | \"version\">,\n): Promise<Variable> {\n  core.debug(`Processing variable ${name}`);\n\n  if (variable?.labels?.[ignoreLabel] === \"true\") {\n    core.debug(`Variable \"${name}\" is marked as ignored. Skipping.`);\n\n    return variable;\n  }\n\n  if (variable == null) {\n    variable = {};\n  }\n\n  let modifiedVariable: FileVariable | undefined = undefined;\n  let content: string;\n\n  // If a variable names a file explicitly, we need to check if the file exists.\n  if (\"file\" in variable) {\n    content = await readFromFile(name, variable);\n  } else if (\"environment\" in variable) {\n    content = readFromEnvironment(name, variable);\n    modifiedVariable = await transformVariable(content, name, variable);\n  } else if (\"content\" in variable) {\n    content = readFromContent(name, variable);\n    modifiedVariable = await transformVariable(content, name, variable);\n  } else {\n    [content, modifiedVariable] = await inferVariable(name, variable, {\n      envVarPrefix,\n      stack,\n    });\n  }\n\n  if (!content) {\n    core.warning(\n      `Variable \"${name}\" is defined with an empty value. This is ` +\n        `not recommended, as it may lead to unexpected behavior.`,\n    );\n  }\n\n  // If the variable specifies an encoding format, we need to encode or decode\n  // the content accordingly. This is useful for secrets that need to be\n  // passed as environment variables or in a specific format.\n  if (variable.labels && encodeLabel in variable.labels) {\n    content = await encodeVariable(content, name, variable);\n    modifiedVariable = await transformVariable(content, name, variable);\n  } else if (variable.labels && decodeLabel in variable.labels) {\n    content = await decodeVariable(content, name, variable);\n    modifiedVariable = await transformVariable(content, name, variable);\n  }\n\n  // Calculate hash of the variable value. If the value didn't change since the\n  // last deployment, the hash will be the same, and we can reuse the existing\n  // secret or config. This avoids unnecessary updates and restarts of the\n  // services depending on the variable.\n  const hash = hashVariable(content);\n  const variableName =\n    modifiedVariable?.name ?? variable.name ?? `${stack}-${name}`;\n\n  return {\n    ...(modifiedVariable ?? variable),\n    name: `${variableName}-${hash.substring(0, 7)}`,\n    labels: {\n      ...(modifiedVariable?.labels ?? variable.labels),\n      [nameLabel]: name,\n      [hashLabel]: hash,\n      [stackLabel]: stack,\n      [versionLabel]: version,\n    } as Record<string, string>,\n  };\n}\n\n// region Content Loading\nasync function readFromFile(name: string, variable: FileVariable) {\n  const filePath = variable.file;\n\n  if (!(await exists(filePath))) {\n    throw new Error(\n      `Variable \"${name}\" specifies the file \"${filePath}\" as its ` +\n        `source, but this file does not exist or is not readable. Ensure ` +\n        `it exists, or remove the \"file\" property from the variable ` +\n        `definition to let the action read the value from the build ` +\n        `environment automatically.`,\n    );\n  }\n\n  core.debug(`Loading variable ${name} from file: ${filePath}`);\n\n  return await readFile(filePath, \"utf8\");\n}\n\nfunction readFromEnvironment(\n  name: string,\n  { environment: variable }: EnvironmentVariable,\n) {\n  if (!(variable in env) || env[variable] === undefined) {\n    throw new Error(\n      `Variable \"${name}\" specifies the environment variable ` +\n        `\"${variable}\" as its source, but there is no such ` +\n        `variable defined in the environment. Ensure it exists, or remove ` +\n        `the \"environment\" property from the variable definition to let ` +\n        `the action infer the value from the variable name automatically.`,\n    );\n  }\n\n  return String(env[variable]);\n}\n\n/**\n * Note that the `content` prop is currently part of the compose specification,\n * but not supported by Swarm. At this point, though, the compose file(s) have\n * already been validated by the docker stack parser, so we can be reasonably\n * sure this has changed, and assume if we've got a content value, it's valid\n * by now.\n */\nfunction readFromContent(_name: string, { content }: ContentVariable) {\n  return String(content);\n}\n\nasync function inferVariable(\n  name: string,\n  variable: BaseVariable,\n  { envVarPrefix, stack }: Pick<Settings, \"envVarPrefix\" | \"stack\">,\n): Promise<[string, FileVariable]> {\n  const filePath = `./${name}.secret`;\n\n  // If the variable doesn't specify a source, we need to check if it exists;\n  // first as a file, then as an environment variable in several variants.\n  if (await exists(filePath)) {\n    core.debug(`Loading variable \"${name}\" from file: \"${filePath}\"`);\n\n    return [\n      await readFile(filePath, \"utf8\"),\n      { ...variable, file: filePath },\n    ] as const;\n  }\n\n  // Attempt to read the variable from the environment using several variants.\n  // This allows to translate configs names like \"log-driver\" to \"LOG_DRIVER\"\n  // or \"APP_LOG_DRIVER\" automatically.\n  const safeName = name.replace(/-/g, \"_\");\n  const variantUpper = safeName.toUpperCase();\n\n  for (const variant of [\n    safeName,\n    variantUpper,\n    `${envVarPrefix}_${safeName}`,\n    `${envVarPrefix}_${variantUpper}`,\n    `${stack}_${safeName}`,\n    `${stack}_${safeName}`.toUpperCase(),\n  ]) {\n    if (env[variant]) {\n      core.debug(\n        `Loading variable \"${name}\" from environment variable \"${variant}\"`,\n      );\n\n      (variable as EnvironmentVariable).environment = variant;\n\n      return [\n        env[variant],\n        await transformVariable(env[variant], name, variable),\n      ] as const;\n    }\n  }\n\n  throw new Error(\n    `Variable \"${name}\" is not defined in the environment. To ` +\n      `use it as a secret or config, please set the environment variable ` +\n      `\"${variantUpper}\" or \"${envVarPrefix}_${variantUpper}\", or create a ` +\n      `file named \"${name}.secret\" in the project root directory.`,\n  );\n}\n\n// endregion\n\n// region Encoding/Decoding\nconst encoders = {\n  base64: (value) => Buffer.from(value, \"utf8\").toString(\"base64\"),\n  base64url: (value) => Buffer.from(value, \"utf8\").toString(\"base64url\"),\n  hex: (value) => Buffer.from(value, \"utf8\").toString(\"hex\"),\n  url: (value) => encodeURIComponent(value),\n} satisfies Record<string, (value: string) => string>;\nconst decoders = {\n  base64: (value) => Buffer.from(value, \"base64\").toString(\"utf8\"),\n  base64url: (value) => Buffer.from(value, \"base64url\").toString(\"utf8\"),\n  hex: (value) => Buffer.from(value, \"hex\").toString(\"utf8\"),\n  url: (value) => decodeURIComponent(value),\n} satisfies Record<string, (value: string) => string>;\n\nasync function encodeVariable(\n  content: string,\n  name: string,\n  variable: Variable,\n) {\n  const format = variable.labels![\n    encodeLabel\n  ].toString() as keyof typeof encoders;\n\n  if (!encoders[format]) {\n    const supported = Object.keys(encoders).join(\", \");\n\n    throw new Error(\n      `Variable \"${name}\" specifies an unknown encoding format: ` +\n        `\"${format}\". Must be one of \"${supported}\".`,\n    );\n  }\n\n  core.debug(`Encoding variable \"${name}\" to ${format}`);\n\n  return encoders[format](content);\n}\n\nasync function decodeVariable(\n  content: string,\n  name: string,\n  variable: Variable,\n) {\n  const format = variable.labels![\n    decodeLabel\n  ].toString() as keyof typeof decoders;\n\n  if (!decoders[format]) {\n    const supported = Object.keys(decoders).join(\", \");\n\n    throw new Error(\n      `Variable \"${name}\" specifies an unknown decoding format: ` +\n        `\"${format}\". Must be one of \"${supported}\".`,\n    );\n  }\n\n  core.debug(`Decoding variable \"${name}\" from ${format}`);\n\n  return decoders[format](content);\n}\n\nasync function transformVariable(\n  value: string,\n  name: string,\n  variable: Variable,\n): Promise<FileVariable> {\n  // Generate a random file name for the secret, so it doesn't conflict with\n  // existing files in the repository\n  const path = `./${name}.${crypto.randomUUID()}.generated.secret`;\n\n  await writeFile(path, value, \"utf8\");\n\n  // Remove the existing value pointer from the variable to avoid multiple\n  // source definition errors during the actual deployment\n  delete (variable as Partial<EnvironmentVariable>).environment;\n  delete (variable as Partial<ContentVariable>).content;\n\n  // Overwrite the variable with the new secret file path, so the docker CLI\n  // will use it instead of the original value\n  return {\n    ...variable,\n    file: path,\n    labels: {\n      ...variable.labels,\n    },\n  };\n}\n\n// endregion\n\n// region Pruning\n/**\n * Prune outdated variables (secrets and configs)\n */\nexport async function pruneVariables(\n  composeSpec: ComposeSpec,\n  client: Readonly<Docker>,\n  settings: Readonly<Settings>,\n) {\n  core.startGroup(\"Pruning outdated variables\");\n\n  await pruneSecrets(composeSpec, client, settings);\n  await pruneConfigs(composeSpec, client, settings);\n\n  core.endGroup();\n}\n\n/**\n * Prune outdated secrets\n */\nexport async function pruneSecrets(\n  { secrets }: ComposeSpec,\n  client: Docker,\n  { stack }: Settings,\n) {\n  core.debug(`Pruning secrets for stack \"${stack}\"`);\n\n  const variableIdentifier = ({\n    stack,\n    name,\n    hash,\n  }: {\n    stack: string;\n    name: string;\n    hash: string;\n  }) => stack + name + hash;\n  const specSecrets = secrets\n    ? Object.values(secrets)\n        .map(({ labels }) => marshalLabels(labels))\n        .filter((labels) => labels !== undefined)\n        .map((labels) => variableIdentifier(labels))\n    : [];\n\n  const items = await client.listSecrets({\n    filters: { label: [`${stackLabel}=${stack}`] },\n  });\n\n  if (items.length == 0) {\n    return;\n  }\n\n  core.info(\n    `Checking ${items.length} secret${items.length !== 1 ? \"s\" : \"\"} ` +\n      `for stack \"${stack}\"`,\n  );\n\n  for (let i = 0; i < items.length; i++) {\n    const { CreatedAt, ID, Spec } = items[i];\n\n    if (!Spec) {\n      core.warning(`Found invalid secret \"${ID}\": No spec found. Ignoring.`);\n\n      continue;\n    }\n\n    const name = Spec.Name ?? ID;\n    const labels = marshalLabels(Spec.Labels);\n\n    core.debug(`Checking secret ${i + 1}/${items.length}: ${name}`);\n\n    if (!labels) {\n      core.warning(`Found invalid secret \"${name}\": Missing labels. Pruning.`);\n\n      await client.getSecret(ID).remove();\n      continue;\n    }\n\n    if (!specSecrets.includes(variableIdentifier(labels))) {\n      const hash = labels.hash.substring(0, 7);\n\n      core.debug(\n        `Pruning outdated version \"${hash}\" of secret ` +\n          `\"${labels.name}\": ${name}`,\n      );\n\n      await client.getSecret(ID).remove();\n    }\n\n    // Check for old secrets\n    if (shouldRotate(new Date(CreatedAt ?? 0))) {\n      core.warning(\n        `Secret \"${name}\" has been in use for too long and should ` +\n          `be rotated!`,\n      );\n    }\n  }\n}\n\n/**\n * Prune outdated configs\n */\nexport async function pruneConfigs(\n  { configs }: ComposeSpec,\n  client: Docker,\n  { stack }: Settings,\n) {\n  core.debug(`Pruning configs for stack \"${stack}\"`);\n\n  const variableIdentifier = ({\n    stack,\n    name,\n    hash,\n  }: {\n    stack: string;\n    name: string;\n    hash: string;\n  }) => stack + name + hash;\n  const specConfigs = configs\n    ? Object.values(configs)\n        .map(({ labels }) => marshalLabels(labels))\n        .filter((labels) => labels !== undefined)\n        .map((labels) => variableIdentifier(labels))\n    : [];\n\n  const items = await client.listConfigs({\n    filters: { label: [`${stackLabel}=${stack}`] },\n  });\n\n  if (items.length == 0) {\n    return;\n  }\n\n  core.info(\n    `Checking ${items.length} config${items.length !== 1 ? \"s\" : \"\"} ` +\n      `for stack \"${stack}\"`,\n  );\n\n  for (let i = 0; i < items.length; i++) {\n    const { ID, Spec } = items[i];\n\n    if (!Spec) {\n      core.warning(`Found invalid config \"${ID}\": No spec found. Ignoring.`);\n\n      continue;\n    }\n\n    const name = Spec.Name ?? ID;\n    const labels = marshalLabels(Spec.Labels);\n\n    core.debug(`Checking config ${i + 1}/${items.length}: ${name}`);\n\n    if (!labels) {\n      core.warning(\n        `Found invalid config \"${name}\": Missing variable labels. Pruning.`,\n      );\n\n      await client.getConfig(ID).remove();\n      continue;\n    }\n\n    if (!specConfigs.includes(variableIdentifier(labels))) {\n      const hash = labels.hash.substring(0, 7);\n\n      core.debug(\n        `Pruning outdated version \"${hash}\" of config ` +\n          `\"${labels.name}\": ${name}`,\n      );\n\n      await client.getConfig(ID).remove();\n    }\n  }\n}\n\n// endregion\n\n// region Helpers\nexport function defineVariable<T extends Variable>(variable: T) {\n  return variable;\n}\n\nexport function hashVariable(value: string) {\n  return createHash(\"sha256\").update(value.trim()).digest(\"hex\");\n}\n\nfunction marshalLabels(labels: Record<string, string | number> | undefined) {\n  const name = labels?.[nameLabel];\n  const hash = labels?.[hashLabel];\n  const stack = labels?.[stackLabel];\n  const version = labels?.[versionLabel];\n\n  if (!name || !hash || !stack || !version) {\n    return undefined;\n  }\n\n  return {\n    name: String(name),\n    hash: String(hash),\n    stack: String(stack),\n    version: String(version),\n  };\n}\n\nfunction shouldRotate(createdAt: Date) {\n  const thirtyDaysAgo = new Date();\n  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n  return createdAt < thirtyDaysAgo;\n}\n\n// endregion\n\ntype BaseVariable = {\n  name?: string;\n  labels?: Record<string, string | number>;\n  driver?: string;\n  driver_opts?: Record<string, string | number>;\n  external?: boolean | string | { name: string };\n  template_driver?: string;\n};\ntype FileVariable = BaseVariable & { file: string };\ntype ContentVariable = BaseVariable & { content: string };\ntype EnvironmentVariable = BaseVariable & { environment: string };\n\n/**\n * Variable (secret or config) specification\n */\nexport type Variable =\n  | BaseVariable\n  | FileVariable\n  | ContentVariable\n  | EnvironmentVariable;\n","import * as core from \"@actions/core\";\nimport { exec } from \"@actions/exec\";\nimport { dump, load } from \"js-yaml\";\nimport { randomUUID } from \"node:crypto\";\nimport { readFile, unlink, writeFile } from \"node:fs/promises\";\nimport { debug } from \"node:util\";\nimport { join } from \"path\";\nimport type { Settings } from \"./settings.js\";\nimport { exists } from \"./utils.js\";\nimport { processVariable, type Variable } from \"./variables.js\";\n\nexport const schemaVersion = \"3.9\";\n\nexport const defaultVariants = [\n  \"docker-compose.production.yaml\",\n  \"docker-compose.production.yml\",\n  \"docker-compose.prod.yaml\",\n  \"docker-compose.prod.yml\",\n  \"docker-compose.yaml\",\n  \"docker-compose.yml\",\n  join(\".docker\", \"docker-compose.yaml\"),\n  join(\".docker\", \"docker-compose.yml\"),\n  join(\"docker\", \"docker-compose.yaml\"),\n  join(\"docker\", \"docker-compose.yml\"),\n] as const;\n\n/**\n * Resolves the Docker Compose file path\n *\n * This function checks if the user has specified any compose files explicitly\n * in the settings. If so, it checks if those files exist and are readable.\n * If any of the specified files are missing, it throws an error and aborts\n * the deployment.\n * If no compose files are specified, it checks common default locations\n * for the compose file to deploy, using the first one it finds.\n * If neither the specified nor the default compose files are found, it throws\n * an error and aborts the deployment.\n */\nexport async function resolveComposeFiles(\n  settings: Readonly<Settings>,\n): Promise<readonly [string, ...string[]]> {\n  debug(`Resolving compose file from ${settings.composeFiles}`);\n\n  // If the user has specified any compose files explicitly, we check those and\n  // bail if any is missing. This avoids accidentally deploying a stack with\n  // the wrong compose file; e.g. if the config file specifies\n  // \"docker-compose.staging.yml\", but the file is actually named\n  // \"docker-compose.staging.yaml\" (with an \"a\"), and there is also a production\n  // config at \"docker-compose.production.yaml\", we would end up deploying the\n  // production stack to a staging environment, possibly wreaking havoc.\n  // So instead, we check if the files exist and are readable, and if not, we\n  // throw an error and abort the deployment.\n  if (settings.composeFiles && settings.composeFiles.length > 0) {\n    const files = await Promise.all(\n      settings.composeFiles.map((path) => exists(path)),\n    );\n\n    if (!files.every(Boolean)) {\n      // Assemble a list of all missing files to include in the error message.\n      const missing = files\n        .map((exists, index) =>\n          !exists ? settings.composeFiles?.[index] : undefined,\n        )\n        .filter((file) => file !== undefined);\n\n      throw new Error(\n        `One or more Compose Files specified in the configuration are ` +\n          `missing or not readable: ${missing.join(\", \")}`,\n      );\n    }\n\n    // At least one file is specified\n    return settings.composeFiles as [string, ...string[]];\n  }\n\n  // If no compose files are specified, we check several default locations for\n  // the compose file to deploy, using the first one we find. This allows users to\n  // use the action without having to specify a compose file, as long as they\n  // follow the naming conventions outlined in the documentation.\n  for (const location of defaultVariants) {\n    if (await exists(location)) {\n      core.info(`Found compose file at \"${location}\"`);\n\n      return [location] as const;\n    }\n  }\n\n  // We couldn't find any compose files, so we throw an error and abort the\n  // deployment early.\n  throw new Error(\"Could not find suitable compose file\");\n}\n\n/**\n * Loads and normalizes the compose specification\n *\n * This function loads the compose specification(s) from all specified or\n * discovered compose files, reconciles the specification to the legacy Compose\n * file version 3 format, and resolves all referenced variables.\n * It returns a set of normalized compose specification objects that will be\n * usable to docker stack commands.\n */\nexport async function loadComposeSpecs(\n  composeFiles: Readonly<Array<string>>,\n  settings: Readonly<Settings>,\n) {\n  return Promise.all(\n    composeFiles.map((path) => loadComposeSpec(path, settings)),\n  );\n}\n\nasync function loadComposeSpec(filename: string, settings: Settings) {\n  const content = await readFile(filename, \"utf8\");\n  const parsedContent = load(content, { filename }) as ComposeSpec;\n\n  return reconcileSpec(parsedContent, settings);\n}\n\n/**\n * Adapt a compose specification to Compose file version 3\n *\n * The docker stack deploy command uses the legacy [Compose file version\n * 3](https://docs.docker.com/reference/compose-file/legacy-versions/) format,\n * used by Compose V1. The latest format, defined by the\n * [Compose specification](https://docs.docker.com/reference/compose-file/)\n * isn't compatible with the docker stack deploy command.\n *\n * @param composeSpec The compose specification to adapt\n * @param settings The settings to use for the deployment\n * @see https://docs.docker.com/engine/swarm/stack-deploy/\n * @see https://docs.docker.com/compose/intro/history/\n */\nexport async function reconcileSpec(\n  composeSpec: ComposeSpec,\n  settings: Settings,\n) {\n  if (composeSpec.name) {\n    delete composeSpec.name;\n  }\n\n  if (!composeSpec.version) {\n    composeSpec.version = schemaVersion;\n  }\n\n  if (!composeSpec.services || Object.keys(composeSpec.services).length === 0) {\n    throw new Error(\"Invalid stack specification: Missing services section\");\n  }\n\n  if (composeSpec.secrets) {\n    for (const [name, entry] of Object.entries(composeSpec.secrets)) {\n      composeSpec.secrets[name] = await processVariable(name, entry, settings);\n    }\n  }\n\n  if (composeSpec.configs) {\n    for (const [name, entry] of Object.entries(composeSpec.configs)) {\n      composeSpec.configs[name] = await processVariable(name, entry, settings);\n    }\n  }\n\n  return composeSpec;\n}\n\n/**\n * Normalize the compose specification\n *\n * This function takes multiple compose specifications and merges them into a\n * single configuration. This works by delegating the merging to the `docker\n * stack config` command, which will:\n *  - validate the compose files according to the docker stack specification,\n *  - merge them into a single, canonical configuration object, and\n *  - resolve all shorthand options to their full form.\n *\n * This process allows users to write compose-spec files—which would normally\n * not be compatible with the stack specification—while still being able\n * to deploy them to Swarm.\n *\n * @param composeSpecs The compose specifications to normalize\n * @param _settings The settings to use for the deployment\n */\nexport async function normalizeComposeSpec(\n  composeSpecs: ComposeSpec[],\n  _settings: Readonly<Settings>,\n) {\n  // As we possibly have modified the compose specs read from the input files,\n  // we need to write them out to temporary files, so we can rely on the docker\n  // stack config command to merge them correctly.\n  const composeFiles = await Promise.all(\n    composeSpecs.map(async (spec) => {\n      const file = `docker-compose.generated.${randomUUID()}.yaml`;\n      await writeFile(file, dump(spec));\n\n      return file;\n    }),\n  );\n\n  let content = \"\";\n  const exitCode = await exec(\n    \"docker\",\n    [\n      \"stack\",\n      \"config\",\n      ...composeFiles.map((path) => `--compose-file=${path}`),\n    ],\n    {\n      listeners: {\n        stdout: (data) => (content += data.toString()),\n      },\n    },\n  );\n\n  // Remove the temporary files again, regardless of the exit code.\n  await Promise.all(composeFiles.map((path) => unlink(path)));\n\n  if (exitCode > 0) {\n    throw new Error(\n      `Failed to load compose file(s): Docker command failed with ` +\n        `exit code [${exitCode}]. Check the logs for more details.`,\n    );\n  }\n\n  if (!content) {\n    throw new Error(\n      \"Failed to load compose file(s): No content produced. This is \" +\n        \"most likely a bug in the deployment action. Please report it to \" +\n        \"the action issues.\",\n    );\n  }\n\n  // Parse the YAML output of the `docker stack config` command, which at this\n  // point is a valid docker stack specification.\n  const spec = load(`${content}\\n`, {\n    filename: \"docker-compose.yaml\",\n    onWarning: (error) => core.warning(error),\n  }) as ComposeSpec | undefined;\n\n  if (!spec) {\n    throw new Error(\n      \"Failed to load compose file(s): Failed to parse YAML output. \" +\n        \"This is most likely a bug in the deployment action. Please report \" +\n        \"it to the action issues.\",\n    );\n  }\n\n  if (!spec?.services || Object.keys(spec.services).length === 0) {\n    throw new Error(\"Invalid stack specification: Missing services section\");\n  }\n\n  return spec;\n}\n\n/**\n * Deploy the stack\n */\nexport async function deployStack(\n  spec: ComposeSpec,\n  settings: Readonly<Settings>,\n) {\n  core.startGroup(\"Deploying stack\");\n\n  try {\n    await exec(\n      \"docker\",\n      [\n        \"stack\",\n        \"deploy\",\n        \"--prune\",\n        \"--quiet\",\n        \"--with-registry-auth\",\n        \"--resolve-image\",\n        \"always\",\n        \"--compose-file\",\n        \"-\",\n        settings.stack,\n      ],\n      { input: Buffer.from(dump(spec)) },\n    );\n\n    core.info(`Deployed stack ${settings.stack}`);\n    core.endGroup();\n  } catch (error) {\n    core.endGroup();\n    throw error;\n  }\n}\n\nexport function defineComposeSpec<T extends ComposeSpec>(spec: T) {\n  return spec;\n}\n\n/**\n * Poor Man's Docker Compose specification\n */\nexport interface ComposeSpec {\n  version?: string;\n  services: Record<string, unknown>;\n  secrets?: Record<string, Variable>;\n  configs?: Record<string, Variable>;\n\n  [key: string]: unknown;\n}\n","import * as core from \"@actions/core\";\nimport Dockerode, { type Service, type UpdateState } from \"dockerode\";\nimport type { Settings } from \"./settings.js\";\nimport { sleep } from \"./utils.js\";\n\n/**\n * Monitor deployment rollout\n *\n * This function monitors the deployment of a Docker stack and checks the status\n * of its tasks until all tasks are running or a timeout occurs.\n * It provides feedback on the deployment status and attempts to report any\n * errors encountered after the containers are started.\n *\n * @param client Docker client instance\n * @param settings Deployment settings\n */\nexport async function monitorDeployment(\n  client: Readonly<Dockerode>,\n  settings: Readonly<Settings>,\n) {\n  if (!settings.monitor) {\n    core.info(\"Post-Deployment monitoring is disabled\");\n\n    return;\n  }\n\n  core.startGroup(\"Monitoring deployment rollout\");\n  core.info(`Monitoring stack \"${settings.stack}\" for post-deployment issues`);\n\n  const startTime = new Date();\n  let attemptsLeft = Math.ceil(\n    settings.monitorTimeout / settings.monitorInterval,\n  );\n  const completedServices = new Set<string>();\n  let services: Service[];\n\n  do {\n    if (--attemptsLeft <= 0) {\n      throw new Error(\"Deployment timed out\");\n    }\n\n    services = await loadServices(client, settings);\n\n    core.debug(\n      `Waiting for services to complete: ` +\n        `${completedServices.size}/${services.length}`,\n    );\n\n    for (const service of services) {\n      if (completedServices.has(service.ID)) {\n        continue;\n      }\n\n      let complete;\n\n      try {\n        complete = isServiceUpdateComplete(service);\n      } catch (error) {\n        if (!(error instanceof Error)) {\n          core.error(\n            \"An unexpected error occurred while checking the service\" +\n              \"status. This is likely a bug in the deployment action. Please \" +\n              \"report this issue in the repository.\",\n          );\n\n          throw error;\n        }\n\n        const logs = (await client.getService(service.ID).logs({\n          stdout: true,\n          stderr: true,\n          timestamps: true,\n          details: true,\n          since: startTime.getTime() / 1_000,\n        })) as unknown as Buffer;\n\n        core.error(\n          `Service \"${service.Spec?.Name ?? service.ID}\" failed to ` +\n            `update: ${error.message}`,\n        );\n        core.error(`Service logs since deployment:\\n${logs.toString()}`);\n\n        throw error;\n      }\n\n      if (complete) {\n        core.info(\n          `Service \"${service.Spec?.Name}\" has been deployed successfully`,\n        );\n        completedServices.add(service.ID);\n      }\n    }\n\n    // In case all services have been updated during the first iteration, we\n    // don't want to sleep and drag out the deployment process unnecessarily.\n    if (completedServices.size < services.length) {\n      await sleep(settings.monitorInterval * 1_000);\n    }\n  } while (completedServices.size < services.length);\n\n  core.info(\"All services have been deployed successfully\");\n}\n\nfunction loadServices(client: Dockerode, settings: Settings) {\n  return client.listServices({\n    filters: {\n      label: [`com.docker.stack.namespace=${settings.stack}`],\n    },\n    status: true,\n  });\n}\n\n/**\n * Check if a Docker service is complete.\n *\n * This function checks whether a Docker service is complete by examining its\n * update status, and compares the number of running and desired tasks.\n *\n * @param service Service to check\n * @returns True if the service is complete, false otherwise\n */\nfunction isServiceUpdateComplete(service: Service) {\n  const name = service.Spec?.Name ?? service.ID;\n  core.debug(`Checking update status of service ${name}`);\n\n  if (!service.UpdateStatus) {\n    if (isServiceRunning(service)) {\n      return true;\n    }\n\n    core.debug(`Update of service ${name} is still in progress`);\n\n    return false;\n  }\n\n  const updateStatus = service.UpdateStatus.State ?? \"unknown\";\n\n  if (updateStatus === \"completed\") {\n    core.debug(`Update of service \"${name}\" is complete`);\n\n    return true;\n  }\n\n  if (updateStatus === \"updating\") {\n    core.debug(`Update of service \"${name}\" is still in progress`);\n\n    return false;\n  }\n\n  const reason = resolveFailureReason(updateStatus);\n\n  throw new Error(`Update of service \"${name}\" failed: ${reason}`);\n}\n\n/**\n * Check if a Swarm Service is running.\n *\n * The Docker API exposes the number of running and desired tasks for a running\n * service. If these numbers are equal, the service has converged and is running\n * as expected; for our case, this means that the service has either been\n * updated or no update was required.\n *\n * @param service Service to check\n * @returns True if the service is running, false otherwise\n */\nfunction isServiceRunning(service: Service) {\n  const name = service.Spec?.Name ?? service.ID;\n  core.debug(`Checking if service \"${name}\" is currently running`);\n\n  if (service.ServiceStatus) {\n    const running = service.ServiceStatus.RunningTasks ?? 0;\n    const desired = service.ServiceStatus.DesiredTasks ?? 0;\n\n    if (running === desired) {\n      core.debug(`Service \"${name}\" is running`);\n\n      return true;\n    }\n\n    core.debug(\n      `Service \"${name}\" is only partially running: ` +\n        `${running}/${desired} tasks running`,\n    );\n\n    return false;\n  }\n\n  core.debug(`Service \"${name}\" is not running`);\n\n  return false;\n}\n\n/**\n * Resolve the failure reason for a service update\n *\n * The failure reason is determined by the state of the service update.\n * The state can be one of the following:\n * - \"paused\"\n * - \"rollback_started\"\n * - \"rollback_completed\"\n * - \"rollback_paused\"\n * - \"unknown\"\n *\n * The function returns a human-readable string describing the failure reason.\n *\n * @param state The state of the service update\n * @returns A human-readable string describing the failure reason\n */\nfunction resolveFailureReason(\n  state: Exclude<UpdateState, \"completed\" | \"updating\"> | \"unknown\",\n) {\n  return (\n    {\n      paused: \"Service is paused\",\n      rollback_started: \"Service failed to update and is being rolled back\",\n      rollback_completed: \"Service failed to update and was rolled back\",\n      rollback_paused: \"Service is paused and is being rolled back\",\n      unknown: \"Service update status is unknown\",\n    }[state] ?? \"Unknown failure reason\"\n  );\n}\n","import Dockerode from \"dockerode\";\nimport packageJson from \"../package.json\" with { type: \"json\" };\nimport {\n  deployStack,\n  loadComposeSpecs,\n  normalizeComposeSpec,\n  resolveComposeFiles,\n} from \"./compose.js\";\nimport { monitorDeployment } from \"./monitoring.js\";\nimport type { Settings } from \"./settings.js\";\nimport { pruneVariables } from \"./variables.js\";\n\nexport function createClient(_settings: Readonly<Settings>) {\n  const { version } = packageJson;\n\n  return new Dockerode({\n    headers: {\n      \"user-agent\": `matchory-deployment/${version} (github-action)`,\n    },\n  });\n}\n\n/**\n * Main deployment function\n */\nexport async function deploy(settings: Readonly<Settings>) {\n  const client = createClient(settings);\n  const composeFiles = await resolveComposeFiles(settings);\n  const composeSpecs = await loadComposeSpecs(composeFiles, settings);\n  const composeSpec = await normalizeComposeSpec(composeSpecs, settings);\n\n  await deployStack(composeSpec, settings);\n\n  if (settings.monitor) {\n    await monitorDeployment(client, settings);\n  }\n\n  await pruneVariables(composeSpec, client, settings);\n\n  return composeSpec;\n}\n","import { getBooleanInput, getInput } from \"@actions/core\";\nimport { env } from \"node:process\";\nimport { debug } from \"node:util\";\n\n/**\n * Deployment settings\n */\nexport interface Settings {\n  stack: string;\n  version: string;\n  composeFiles?: string[];\n  envVarPrefix: string;\n  monitor: boolean;\n  monitorTimeout: number;\n  monitorInterval: number;\n}\n\nexport function defineSettings<T extends Settings>(settings: T) {\n  return settings;\n}\n\n/**\n * Parse settings from GitHub Actions inputs\n */\nexport function parseSettings() {\n  debug(\"Parsing settings from inputs\");\n\n  return defineSettings({\n    stack: inferStackName(getInput(\"stack-name\")),\n    version: inferVersion(getInput(\"version\")),\n    composeFiles: inferComposeFiles(getInput(\"compose-file\")),\n    envVarPrefix: (getInput(\"env-var-prefix\") || \"DEPLOYMENT\").replace(\n      /_$/,\n      \"\",\n    ),\n    monitor: getBooleanInput(\"monitor\", { required: false }) ?? false,\n    monitorTimeout: parseInt(getInput(\"monitor-timeout\") || \"300\", 10),\n    monitorInterval: parseInt(getInput(\"monitor-interval\") || \"5\", 10),\n  });\n}\n\nfunction inferStackName(name: string | undefined) {\n  return name || env.GITHUB_REPOSITORY?.split(\"/\")?.pop() || \"unknown\";\n}\n\nfunction inferVersion(version: string | undefined) {\n  if (version) {\n    return version;\n  }\n\n  if (env.GITHUB_REF?.startsWith(\"refs/tags/\")) {\n    return env.GITHUB_REF.replace(\"refs/tags/\", \"\");\n  }\n\n  return env.GITHUB_SHA?.substring(0, 7) ?? \"unknown\";\n}\n\nfunction inferComposeFiles(files?: string) {\n  const composeFiles = files ?? env.COMPOSE_FILE;\n  const separator = env.COMPOSE_PATH_SEPARATOR || \":\";\n\n  return (composeFiles?.split(separator) ?? [])\n    .map((file) => file.trim())\n    .filter(Boolean);\n}\n","import * as core from \"@actions/core\";\nimport { deploy } from \"./deployment.js\";\nimport { parseSettings } from \"./settings.js\";\n\nexport async function run() {\n  const settings = parseSettings();\n\n  try {\n    const composeSpec = await deploy(settings);\n\n    core.setOutput(\"compose-spec\", composeSpec);\n    core.setOutput(\"stack-name\", settings.stack);\n    core.setOutput(\"version\", settings.version);\n    core.setOutput(\"status\", \"success\");\n  } catch (error) {\n    if (error instanceof Error) {\n      core.setFailed(error);\n    } else {\n      core.setFailed(\"An unknown error occurred\");\n    }\n\n    core.setOutput(\"status\", \"failure\");\n  }\n}\n"],"names":["stack","exists","spec"],"mappings":"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"}